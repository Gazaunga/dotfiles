%
mkdir ~/dotfiles
git clone https://github.com/nicksp/dotfiles.git ~/dotfiles
cd ~/dotfiles
sudo chmod +x setup.sh
./setup.sh
%
sudo apt-get -qq update && sudo apt-get -qq dist-upgrade
cd
git clone https://github.com/nojhan/liquidprompt.git
source liquidprompt/liquidprompt
echo '[[ $- = *i* ]] && source ~/liquidprompt/liquidprompt' >> ~/.bashrc

# install glances, like htop
curl -L https://bit.ly/glances | /bin/bash

or

pip install glances
pip install ImageScraper

#sejda cli pdf manipulator
wget https://github.com/torakiki/sejda/releases/download/v3.0.0.M11/sejda-console_3.0.0.M11-1_all.deb
or
wget https://github.com/torakiki/sejda/releases/download/v3.0.0.M11/sejda-console-3.0.0.M11-bin.zip

# weather in term
apt-get install ansiweather
or
https://github.com/fcambus/ansiweather.git
cd ansiweather
./ansiweather

ansiweather -l Baltimore,US -u imperial -s true -f 5 -d true

%
git clone https://github.com/jmcantrell/bashful.git
%
# Quake Style Terminal Emulator for i3
exec --no-startup-id xterm -name qterm
for_window [instance="qterm"] floating enable;
for_window [instance="qterm"] move scratchpad; [instance="qterm"] scratchpad show; move position 0px 22px; resize shrink height 

300px; resize grow width 683px; move scratchpad
bindsym $mod+t [instance="qterm"] scratchpad show
%
https://github.com/flazzarini/dotfiles/tree/master/roxterm
%
# See what we have to work with ...
HAVE_VIM=$(command -v vim)
HAVE_GVIM=$(command -v gvim)

# EDITOR
if [ -n "$HAVE_VIM" ]; then
    EDITOR=vim
else
    EDITOR=vi
fi
export EDITOR
%
# ----------------------------------------------------------------------
# PROMPT
# ----------------------------------------------------------------------

RED="\[\033[0;31m\]"
BROWN="\[\033[0;33m\]"
GREY="\[\033[0;97m\]"
BLUE="\[\033[0;34m\]"
PS_CLEAR="\[\033[0m\]"
SCREEN_ESC="\[\033k\033\134\]"

if [ "$LOGNAME" = "root" ]; then
    COLOR1="${RED}"
    COLOR2="${BROWN}"
    P="#"
elif hostname | grep -q '\.github\.'; then
    GITHUB=true
    COLOR1="\[\e[0;94m\]"
    COLOR2="\[\e[0;92m\]"
    P="\$"
else
    COLOR1="${BLUE}"
    COLOR2="${BROWN}"
    P="\$"
fi

prompt_simple() {
    unset PROMPT_COMMAND
    PS1="[\u@\h:\w]\$ "
    PS2="> "
}

prompt_compact() {
    unset PROMPT_COMMAND
    PS1="${COLOR1}${P}${PS_CLEAR} "
    PS2="> "
}

prompt_color() {
    PS1="${GREY}[${COLOR1}\u${GREY}@${COLOR2}\h${GREY}:${COLOR1}\W${GREY}]${COLOR2}$P${PS_CLEAR} "
    PS2="\[[33;1m\] \[[0m[1m\]> "
}
%
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Autocorrect typos in path names when using `cd`
shopt -s cdspell;


%
# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}
%
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}
%
# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}
%
# `s` with no arguments opens the current directory in Spacemacs, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		emacs .;
	else
		emacs "$@";
	fi;
}
%
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
%
# make `less` not clear the screen upon exit
alias less='less -X';

%
fontconfig-enhanced-defaults

%
urxvtcd -e bash -c 'screen -dRR -S $HOSTNAME
%
alias fuck="sudo !!"
%
"xmonad --recompile && xmonad --restart" 
%
alias psg='ps aux | grep'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'


%

die() { echo $@; exit -1; }

%
wget-rec() {
  wget --recursive \
    --page-requisites \
    --html-extension \
    --convert-links \
    --no-parent \
    $*
}
%
mkdircd() { mkdir $1 && cd $1; }
alias mcd='mkdircd'
%
memo() {
  echo "$*" | mail -n -s "$*" jeremy.ottley@gmail.com
}
%
function stopwatch(){
  case $(uname) in
    "Linux") DATE=date ;;
    "Darwin") DATE=gdate ;;
  esac
  local BEGIN=`$DATE +%s`
  while true; do
    echo -ne "$($DATE -u --date @$((`$DATE +%s` - $BEGIN)) +%H:%M:%S)\r";
  done
}
%
%
exec --no-startup-id xfce4-panel --disable-wm-check

%
# polkit is necessary for this to work

set $Locker i3lock && sleep 1

set $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id $Locker, mode "default"
    bindsym e exec --no-startup-id i3-msg exit, mode "default"
    bindsym s exec --no-startup-id $Locker && systemctl suspend, mode "default"
    bindsym h exec --no-startup-id $Locker && systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode "default"  

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+Pause mode "$mode_system"
%
# Set terminal colors when launching screen
alias tmux="TERM=screen-256color-bce tmux"
%
# Fuzzy cd
function cdf() {
  cd *$1*/
}
%
black="\[\e[30m\]"
red="\[\e[31m\]"
green="\[\e[32m\]"
yellow="\[\e[33m\]"
blue="\[\e[34m\]"
magenta="\[\e[35m\]"
cyan="\[\e[36m\]"
white="\[\e[37m\]"
reset="\[\e[0m\]"
%
alias path='echo $PATH | tr -s ":" "\n"'
%
# Include custom aliases
[[ -f ~/.aliases.local ]] && source ~/.aliases.local
%
# lock screen
bindsym $mod+Escape exec --no-startup-id ~/bin/lockscreen
%
# screenshot (fullscreen)
bindsym $mod+F5 exec --no-startup-id scrot ~/Pictures/screenshots/`date +%Y%m%d-%H%M%S`.png
%
# task manager
bindsym $mod+BackSpace exec --no-startup-id xfce4-taskmanager
%
# calendar
bindsym $mod+c exec --no-startup-id gsimplecal
%
exec --no-startup-id rofi -hide-scrollbar -show window

%
# power menu
set $sysmenu " [p]oweroff [r]eboot [h]ibernate h[i]bernate-reboot [s]leep "
bindsym $mod+XF86PowerOff     mode $sysmenu

mode $sysmenu {
    bindsym p         exec shutdown -P now
    bindsym r         exec reboot
    bindsym h	      exec sudo /usr/local/sbin/hibernate; mode "default"
    bindsym i 	      exec sudo /usr/local/sbin/hibernate reboot; mode "default"
    bindsym s         exec ~/bin/lockscreen; pm-suspend; mode "default"
    bindsym Return    mode "default"
    bindsym Escape    mode "default"
}
%
exec --no-startup-id compton -b --config ~/.config/compton/compton.conf
%
exec --no-startup-id sh ~/.fehbg
%

%
# 1 pixel decoration on new windows
new_window 1pixel

hide_edge_borders both
%

%

%

