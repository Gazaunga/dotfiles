%
mkdir ~/dotfiles
git clone https://github.com/nicksp/dotfiles.git ~/dotfiles
cd ~/dotfiles
sudo chmod +x setup.sh
./setup.sh
%
sudo apt-get -qq update && sudo apt-get -qq dist-upgrade
cd
git clone https://github.com/nojhan/liquidprompt.git
source liquidprompt/liquidprompt
echo '[[ $- = *i* ]] && source ~/liquidprompt/liquidprompt' >> ~/.bashrc

# install glances, like htop
curl -L https://bit.ly/glances | /bin/bash

or

pip install glances
pip install ImageScraper

#sejda cli pdf manipulator
wget https://github.com/torakiki/sejda/releases/download/v3.0.0.M11/sejda-console_3.0.0.M11-1_all.deb
or
wget https://github.com/torakiki/sejda/releases/download/v3.0.0.M11/sejda-console-3.0.0.M11-bin.zip

# weather in term
apt-get install ansiweather
or
https://github.com/fcambus/ansiweather.git
cd ansiweather
./ansiweather

ansiweather -l Baltimore,US -u imperial -s true -f 5 -d true

%
git clone https://github.com/jmcantrell/bashful.git
%
# Quake Style Terminal Emulator for i3
exec --no-startup-id xterm -name qterm
for_window [instance="qterm"] floating enable;
for_window [instance="qterm"] move scratchpad; [instance="qterm"] scratchpad show; move position 0px 22px; resize shrink height 

300px; resize grow width 683px; move scratchpad
bindsym $mod+t [instance="qterm"] scratchpad show
%
https://github.com/flazzarini/dotfiles/tree/master/roxterm
%
# See what we have to work with ...
HAVE_VIM=$(command -v vim)
HAVE_GVIM=$(command -v gvim)

# EDITOR
if [ -n "$HAVE_VIM" ]; then
    EDITOR=vim
else
    EDITOR=vi
fi
export EDITOR
%
# ----------------------------------------------------------------------
# PROMPT
# ----------------------------------------------------------------------

RED="\[\033[0;31m\]"
BROWN="\[\033[0;33m\]"
GREY="\[\033[0;97m\]"
BLUE="\[\033[0;34m\]"
PS_CLEAR="\[\033[0m\]"
SCREEN_ESC="\[\033k\033\134\]"

if [ "$LOGNAME" = "root" ]; then
    COLOR1="${RED}"
    COLOR2="${BROWN}"
    P="#"
elif hostname | grep -q '\.github\.'; then
    GITHUB=true
    COLOR1="\[\e[0;94m\]"
    COLOR2="\[\e[0;92m\]"
    P="\$"
else
    COLOR1="${BLUE}"
    COLOR2="${BROWN}"
    P="\$"
fi

prompt_simple() {
    unset PROMPT_COMMAND
    PS1="[\u@\h:\w]\$ "
    PS2="> "
}

prompt_compact() {
    unset PROMPT_COMMAND
    PS1="${COLOR1}${P}${PS_CLEAR} "
    PS2="> "
}

prompt_color() {
    PS1="${GREY}[${COLOR1}\u${GREY}@${COLOR2}\h${GREY}:${COLOR1}\W${GREY}]${COLOR2}$P${PS_CLEAR} "
    PS2="\[[33;1m\] \[[0m[1m\]> "
}
%
# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Autocorrect typos in path names when using `cd`
shopt -s cdspell;


%
# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}
%
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}
%
# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}
%
# `s` with no arguments opens the current directory in Spacemacs, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		emacs .;
	else
		emacs "$@";
	fi;
}
%
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
%
# make `less` not clear the screen upon exit
alias less='less -X';

%
fontconfig-enhanced-defaults

%
urxvtcd -e bash -c 'screen -dRR -S $HOSTNAME
%
alias fuck="sudo !!"
%
"xmonad --recompile && xmonad --restart" 
%
alias psg='ps aux | grep'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'


%

die() { echo $@; exit -1; }

%
wget-rec() {
  wget --recursive \
    --page-requisites \
    --html-extension \
    --convert-links \
    --no-parent \
    $*
}
%
mkdircd() { mkdir $1 && cd $1; }
alias mcd='mkdircd'
%
memo() {
  echo "$*" | mail -n -s "$*" jeremy.ottley@gmail.com
}
%
function stopwatch(){
  case $(uname) in
    "Linux") DATE=date ;;
    "Darwin") DATE=gdate ;;
  esac
  local BEGIN=`$DATE +%s`
  while true; do
    echo -ne "$($DATE -u --date @$((`$DATE +%s` - $BEGIN)) +%H:%M:%S)\r";
  done
}
%
%
exec --no-startup-id xfce4-panel --disable-wm-check

%
# polkit is necessary for this to work

set $Locker i3lock && sleep 1

set $mode_system System (l) lock, (e) logout, (s) suspend, (h) hibernate, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id $Locker, mode "default"
    bindsym e exec --no-startup-id i3-msg exit, mode "default"
    bindsym s exec --no-startup-id $Locker && systemctl suspend, mode "default"
    bindsym h exec --no-startup-id $Locker && systemctl hibernate, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode "default"  

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+Pause mode "$mode_system"
%
# Set terminal colors when launching screen
alias tmux="TERM=screen-256color-bce tmux"
%
# Fuzzy cd
function cdf() {
  cd *$1*/
}
%
black="\[\e[30m\]"
red="\[\e[31m\]"
green="\[\e[32m\]"
yellow="\[\e[33m\]"
blue="\[\e[34m\]"
magenta="\[\e[35m\]"
cyan="\[\e[36m\]"
white="\[\e[37m\]"
reset="\[\e[0m\]"
%
alias path='echo $PATH | tr -s ":" "\n"'
%
# Include custom aliases
[[ -f ~/.aliases.local ]] && source ~/.aliases.local
%
# lock screen
bindsym $mod+Escape exec --no-startup-id ~/bin/lockscreen
%
# screenshot (fullscreen)
bindsym $mod+F5 exec --no-startup-id scrot ~/Pictures/screenshots/`date +%Y%m%d-%H%M%S`.png
%
# task manager
bindsym $mod+BackSpace exec --no-startup-id xfce4-taskmanager
%
# calendar
bindsym $mod+c exec --no-startup-id gsimplecal
%
exec --no-startup-id rofi -hide-scrollbar -show window

%
# power menu
set $sysmenu " [p]oweroff [r]eboot [h]ibernate h[i]bernate-reboot [s]leep "
bindsym $mod+XF86PowerOff     mode $sysmenu

mode $sysmenu {
    bindsym p         exec shutdown -P now
    bindsym r         exec reboot
    bindsym h	      exec sudo /usr/local/sbin/hibernate; mode "default"
    bindsym i 	      exec sudo /usr/local/sbin/hibernate reboot; mode "default"
    bindsym s         exec ~/bin/lockscreen; pm-suspend; mode "default"
    bindsym Return    mode "default"
    bindsym Escape    mode "default"
}
%
exec --no-startup-id compton -b --config ~/.config/compton/compton.conf
%
exec --no-startup-id sh ~/.fehbg
%

%
# 1 pixel decoration on new windows
new_window 1pixel

hide_edge_borders both
%
%
autoremove() {

    # Remove packages that were automatically installed to satisfy
    # dependencies for other packages and are no longer needed.

    execute \
        "sudo apt-get autoremove -qqy" \
        "APT (autoremove)"

}
%
install_package() {

    declare -r PACKAGE="$2"
    declare -r PACKAGE_READABLE_NAME="$1"

    if ! package_is_installed "$PACKAGE"; then
        execute "sudo apt-get install --allow-unauthenticated -qqy $PACKAGE" "$PACKAGE_READABLE_NAME"
        #                                      suppress output â”€â”˜â”‚
        #            assume "yes" as the answer to all prompts â”€â”€â”˜
    else
        print_success "$PACKAGE_READABLE_NAME"
    fi

}

%
upgrade() {

    # Install the newest versions of all packages installed.

    execute \
        "export DEBIAN_FRONTEND=\"noninteractive\" \
            && sudo apt-get -o Dpkg::Options::=\"--force-confnew\" upgrade -qqy" \
        "APT (upgrade)"

}
%

answer_is_yes() {
    [[ "$REPLY" =~ ^[Yy]$ ]] \
        && return 0 \
        || return 1
}

ask() {
    print_question "$1"
    read -r
}

ask_for_confirmation() {
    print_question "$1 (y/n) "
    read -r -n 1
    printf "\n"
}

ask_for_sudo() {

    # Ask for the administrator password upfront.

    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done &> /dev/null &

}
%
mkd() {
    if [ -n "$1" ]; then
        if [ -e "$1" ]; then
            if [ ! -d "$1" ]; then
                print_error "$1 - a file with the same name already exists!"
            else
                print_success "$1"
            fi
        else
            execute "mkdir -p $1" "$1"
        fi
    fi
}
%
%
# play random tv series and movies

play_random_video_file(){
        FILEDIR=$1
        find $FILEDIR -type f \( ! -name "*.jpg" ! -name "@eaDir" ! -name "*.vsmeta" !  -name ".txt"  ! -name "*.png" ! -name "*.srt" \) \
        | sort -R |tail -$N | head -n 1 | \
        while read file ; do
            mplayer -nosub -noautosub -fs -zoom -nolirc -nojoystick -nomouseinput -noar -forcedsubsonly $file
        done
        }
%
wikipediaSearch() {
echo -n -e "\n============================================\n\tWelcome to WikiPedia Search"; echo ""; i=1 ; for line in $(lynx --dump "http://en.wikipedia.org/w/index.php?title=Special%3ASearch&profile=default&search=$1&fulltext=Search" | grep http://en.wikipedia.org/wiki | cut -c7-); do echo $i $line; lines[$i]=$line ;  i=$(($i+1)); done ; echo -n -e "\n============================================\n\tPlease select the link to open - "; read answer; w3m ${lines[$answer]}
}
%
## ARCHWIKI SEARCH FUNCTION ##
archSearch() {
echo -n -e "\n============================================\n\tWelcome to Arch Wiki Search"; echo ""; i=1 ; for line in $(lynx --dump "https://wiki.archlinux.org/index.php?title=Special%3ASearch&profile=default&search=$1" | grep https://wiki.archlinux.org/ | cut -c7-); do echo $i $line; lines[$i]=$line ; i=$(($i+1)); done ; echo -n -e "\n============================================\n\tPlease select the link to open - "; read answer; w3m ${lines[$answer]}
}

%
#Fill screen with colours | Usage: colours
colours()
{
  _I=1
  _J=0
  _K=0
  _WIDTH=$COLUMNS
  _MARGIN=0
  while true; do
  _A=$(($RANDOM % 3))
  _B=$(($RANDOM % 2))
  _C=$(($RANDOM % 3))
  case $_A in
  0)
    case $_B in
    0)
      [ $_I -gt 1 ] && _I=$(($_I - 1))
    ;;
    1)
      [ $_I -lt 6 ] && _I=$(($_I + 1))
    ;;
    esac
  ;;
  1)
    case $_B in
    0)
      [ $_J -gt 0 ] && _J=$(($_J - 1))
    ;;
    1)
      [ $_J -lt 5 ] && _J=$(($_J + 1))
    ;;
    esac
  ;;
  2)
    case $_B in
    0)
      [ $_K -gt 0 ] && _K=$(($_K - 1))
    ;;
    1)
      [ $_K -lt 5 ] && _K=$(($_K + 1))
    ;;
    esac
  ;;
  esac
  case $1 in
    1)
      _DELTA=$2
      case $_C in
        0)
          [ $_WIDTH -lt $(($COLUMNS - 2*$_DELTA)) ] && _WIDTH=$(($_WIDTH + 2*$_DELTA))
        ;;
        1)
          [ $_WIDTH -gt $((1 + 2*$_DELTA)) ] && _WIDTH=$(($_WIDTH - 2*$_DELTA))
        ;;
      esac
      _MARGIN=$((($COLUMNS-$_WIDTH)/2))
    ;;
    2)
      _WIDTH=$2
      _DELTA=$3
      case $_C in
        0)
          [ $_MARGIN -le $(($COLUMNS - $_WIDTH - $_DELTA)) ] && _MARGIN=$(($_MARGIN + $_DELTA))
        ;;
        1)
          [ $_MARGIN -ge $_DELTA ] && _MARGIN=$(($_MARGIN - $_DELTA))
        ;;
      esac
    ;;
    *)
      _WIDTH=$COLUMNS
      _MARGIN=0
    ;;
  esac
  _NUMBER=$((15 + $_I + 6*$_J + 36*$_K))

  echo -en "\e[0;49m"
  if [ $_MARGIN -gt 0 ]; then
    for _FOO in $(seq $_MARGIN); do
      echo -en " "
    done
  fi

  printf "\e[0;48;5;${_NUMBER}m"
  for _FOO in $(seq $_WIDTH); do
    echo -en " "
  done

  echo -e "\e[0;49m"
  done
}

%
https://www.reddit.com/r/dailyscripts/comments/59uqop/jpeg_optimization_script_bash/


%
https://natelandau.com/bash-scripting-utilities/
%
alias disapprove='echo à² _à² '

%
alias lal='ls -alh'
alias ll='ls -lh'
alias lll='ls -alh'

alias nano='vi'

alias ^L='clear'

alias nethack='telnet nethack.alt.org'

mcd() { mkdir -p -- "$1" && cd -- "$1" }

cls() { cd -- "$1" && ls }

backup() { cp -- "$1"{,.bak};}

alias randbg='feh --bg-scale --randomize --no-fehbg ~/Pictures/wallpapers/* &'
%
# Needs reflector

alias reflectorize='cat /etc/pacman.d/mirrorlist >> /etc/pacman.d/mirrorlist.top \
    && rm /etc/pacman.d/mirrorlist \
    && reflector -c "United States" -p http -a 24 -f 5 --sort rate --save /etc/pacman.d/mirrorlist \
    && sudo pacman -Syu'
%
https://github.com/zer0ed/zer0prompt/

%
# Start a command in the background, redirect ouptput to /dev/null

b(){
  ("$@" & disown ) >/dev/null 2>&1 </dev/null
  which "$1" >/dev/null 2>&1
}
%
alias ssync="rsync --rsh=ssh"

alias GET='wget -qO -'

alias minscr='screen -DRU'
alias minmux='tmux attach || tmux'
%
sshen() {
    screen -e ^~~ -- ssh -t "$@" -- screen -axARU
}

moshen() {
    screen -e ^~~ -- mosh "$@" -- screen -axARU
}
%
alias cdp='wrappercd'
wrappercd() {
    if [ $# -eq 0 ]; then
        popd >/dev/null 2>&1
    else
        pushd "$1" >/dev/null
    fi
}

%
[redshift]
location-provider=manual

[manual]
lat=43.5
lon=-80.5
%
# Make gradient wallpapers from uigradients.com

mkgradient () {
    res=$(xrandr | sed -rn "s/.*current (\w+) x (\w+).*/\1x\2/p")
    rand_deg=$(shuf -i 0-359 -n 1)
    gradients=$(curl -s uigradients.com/gradients.json)
    rand_sel=$(shuf -i 0-$(echo "$gradients" | jq length) -n 1)
    info=($(echo "$gradients" | jq -r ".["$rand_sel"] | \
                                       .colors[0], \
                                       .colors[1], \
                                       .name"))
    convert -size "$res" \
            gradient:"${info[0]}"-"${info[1]}" \
            -distort SRT "$rand_deg" \
            ~/Hello/wp.png;

    feh --bg-fill ~/Hello/wp.png
    echo "${info[2]}"
}

%

# adjust fontsize
fontsize(){
    printf '\33]50;%s%d\007' "xft:Terminus:pixelsize=" $1
}
%
alias back='cd "$OLDPWD"'
%

alias zzz='sudo pm-suspend'
%

%

wttr () {
curl http://wttr.in/$1
}

%
# Requires Handbrake
#Convert to .mp4 | Usage: ipod5g foo.mpg

ipod5g () {
HandBrakeCLI -i "$1" -o "${1%.*}.ipod5g.mp4" --preset="iPod"
}
%
#Sprunge Paste | Usage: sprunge <file>
function sprunge() {
  if (($#)); then
if [[ -f $1 && -r $1 ]]; then
curl -F 'sprunge=<-' http://sprunge.us < "$1"
    else
printf 'file %s does not exist or is not readable\n' "$1" >&2
      return 1
    fi
else
curl -F 'sprunge=<-' http://sprunge.us
  fi
}

%
# Run a command x times | Usage: runx <value>
# http://www.stefanoforenza.com/how-to-repeat-a-shell-command-n-times/
runx() {
    n=$1
    shift
    while [ $(( n -= 1 )) -ge 0 ]
    do
        "$@"
    done
}
%
# Google images search bash function  | Usage: images <foo>
images() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://www.google.co.uk/search?tbm=isch&hl=en&source=hp&biw=1366&bih=679&q=$search"
}

# YouTube search bash function  | Usage: videos <foo>
videos() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://www.youtube.com/results?search_query=$search"
}

# Wikipedia English search bash function   | Usage: wiki <foo>
wiki() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "http://en.wikipedia.org/w/index.php?search=$search"
}

# Soundcloud music bash search function  | Usage: soundcloud <foo>
soundcloud() {
    search=""
    for term in $*; do
        search="$search%20$term"
    done
    xdg-open "https://soundcloud.com/search?q=$search"
}

#wallpaper changer

fehpap() {
        zenity --file-selection | xargs feh --bg-scale 
 } 

%
alias genpasswd="strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo"
%

alias cmount="mount | column -t"
%
alias meminfo='free -m -l -t'
%

alias busy="cat /dev/urandom | hexdump -C | grep "ca fe"" 
%

%
https://github.com/lakshaykalbhor/MusicNow

%
#urxvt with image as background
urxvt --background-expr 'rootalign keep { load "~/imagehere.png" }'


%

alias minscr='screen -DRU'
alias minmux='tmux attach || tmux'
%
alias vim='emacs -nw'
%
git clone https://github.com/actionless/oomox.git
cd oomox
./gui.sh

%
https://github.com/neeasade/xst
%
if [[ -x /usr/bin/emacs ]] || [[ -x /usr/local/bin/emacs ]]; then
  export EDITOR=emacs
elif [[ -x /usr/bin/vim ]] || [[ -x /bin/vim ]]; then
  export EDITOR=vim
else
  echo "what? no emacs or vim on this system, falling back to \`vi'."
  export EDITOR=vi
fi

%
xorg/.xprofile
# swap caps with escape
setxkbmap -option "caps:swapescape"
%


%
%


%
%
st.termname:     st-256color
! st.font:         Akkurat-Mono:pixelsize=17
! st.font:         PragmataPro Mono:pixelsize=17
! st.font:         Iosevka:pixelsize=17
! st.font: Envy Code R:pixelsize=18
st.font: lucy tewi:pixelsize=16
st.borderpx:     2
st.cursorshape:  2
st.cursorthickness:  2
st.bold_font:    1
st.xfps:         60
st.actionfps:    60
! st.chscale:      1.0
! st.cwscale:      0.9
st.chscale:      0.7
st.cwscale:      0.75
st.blinktimeout: 800
st.bellvolume:   0
st.opacity:      255

*.foreground: #BCBCBC
*.background: #262626
*.color0:     #1C1C1C
*.color8:     #444444
*.color1:     #AF5F5F
*.color9:     #FF8700
*.color2:     #5F875F
*.color10:    #87AF87
*.color3:     #87875F
*.color11:    #FFFFAF
*.color4:     #5F87AF
*.color12:    #8FAFD7
*.color5:     #5F5F87
*.color13:    #8787AF
*.color6:     #5F8787
*.color14:    #5FAFAF
*.color7:     #6C6C6C
*.color15:    #FFFFFF

%
# in AUR
vtop
%
exec_ALWAYS feh   --bg-scale   /home/gazbit/Pictures/gentoomucca.png
%
exec --no-startup-id compton --config ~/.compton.conf -b
%
exec --no-startup-id polybar top
%
# query if the package is installed, if not, install
if ! pacman -Qq | grep -qw xdotool; then
    sudo pacman -S xdotool
fi

# Here is the ubuntu version
if ! dpkg -l | grep -qw xdotool; then
    sudo apt-get install xdotool
fi
%
if [ -f ~/.aliases ]; then
    . ~/.aliases
fi
%
SSHHOME=${SSHHOME:=~}


%


%
%


%
%


%
%


%
%


%
%


%

chknet.sh

#!/bin/bash

green="\x1b[32m"
red="\x1b[31m"
reset="\x1b[m"

ON="$green ON $reset"
OFF="$red OFF $reset"

if (ping -W 2 -c 1 192.168.0.1 &>/dev/null) then
    echo -e "LAN:\t$ON"
else 
    echo -e "LAN:\t$OFF"
fi

if (ping -W 2 -c 1 8.8.8.8 &>/dev/null) then
    echo -e "WAN:\t$ON"
else 
    echo -e "WAN:\t$OFF"
fi

if (ping -W 2 -c 1 www.reddit.com &>/dev/null) then
    echo -e "DNS:\t$ON"
else
    echo -e "DNS:\t$OFF"
fi
%


%

%


%

%


%


%

%


%

%


%

%


%


%

%


%

%


%

%

